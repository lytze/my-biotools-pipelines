#!/bin/bash
set -e

## HELP MSG
if [ $# -eq 0 ] || [ $1 = "-h" ] || [ $1 = "--help" ] ; then
    echo -e \
"Arguments < formmat: -flag [type] Intro (defalt value) >
    -p [INT]        Thread number (4)
    -t [fq|gz]      Input file type (gz)
    -i [PATH/DIR]   PATH to input data directory (./data)
    -h [PATH/FILE]  PATH to data-head list (./data-head)
    -s [STRING]     File name suffix (_*.fastq.gz)
                    string pattern after the data-head part
                    use * to represent the 1/2 read indicator
    -b [PATH/FILE]  PATH to sample / data-head table, use data-
                    head as sample name if not assigned (false)
    -o [STRING]     Output file name prefix (variants)
    -r              Record the run to a .sh file (false)
    -@ [1..4]       Jump to step number (1)
    -$ [1..4]       Process until step number (4)
        Steps: 0. fastq QC 1. make Alignment 2. prepare bam
               3. call variants 4. combine variants
    -h|--help       This friendly help information"
    exit 0
fi

## DEFAULT OPTs
TR=4                 # p = THREAD NUMBER
FT="gz"              # t = FILE TYPE
DA="./data"          # i = PATH/DATA
DH="./data-head"     # h = PATH/DATA-HEAD
SU="_*.fastq.gz"     # s = SUFIX
US=false             # b = SAMPLE NAME TABLE
FO="variants"        # o = OUTPUT PREFIX
JU=1                 # @ = JUMP TO STEP
JE=4                 # $ = PROCESS END STEP

## GET OPTs
while getopts 'p:t:i:h:s:b:o:r@:$:' OPT
do
    case $OPT in
        p)  TR=$OPTARG ;;
        t)  FT=$OPTARG ;;
        i)  DA=$OPTARG ;;
        h)  DH=$OPTARG ;;
        s)  SU=$OPTARG ;;
        b)  US=true
            SF=$OPTARG ;;
        o)  FO=$OPTARG ;;
        r)  echo "`basename $0` $@" > run`date +%y-%m-%d-%H:%M:%S`.sh ;;
        @)  JU=$OPTARG ;;
        $)  JE=$OPTARG
    esac
done

## CHECK JUMP
if [[ $JU -gt $JE ]] || [[ $JU -gt 4 ]] || [[ $JE -lt 1 ]] ; then
    echo "[ ERROR ] PROCESS JUMPING VALID ONLY [ 1 <= @ <= $ <= 4 ]"
    exit 1
fi

## RECONSTRUCT INPUT FILENAME
SUF=`echo $SU | cut -f1 -d*`
SUL=`echo $SU | cut -f2 -d*`

## CHECK EXISTENCE of REQUIRED FILES
DA=`readlink -m $DA`
if [[ ! -e $DA ]] ; then
    echo "[ ERROR ] INPUT DATA DIRECTORY <$DA> NOT FOUND"
    exit 1
elif [[ ! -d $DA ]] ; then
    echo "[ ERROR ] INPUT DATA DIRECTORY <$DA> IS NOT A DIRECTORY"
    exit 1
fi
DH=`readlink -m $DH`
if [[ ! -e $DH ]] ; then
    echo "[ ERROR ] DATA-HEAD LIST <$DH> NOT FOUND"
    exit 1
elif [[ ! -f $DH ]] ; then
    echo "[ ERROR ] DATA-HEAD LIST <$DH> IS NOT AN ORDINARY FILE"
    exit 1
fi
if $US ; then
    SF=`readlink -m $SF`
    if [[ ! -e $SF ]] ; then
        echo "[ ERROR ] SAMPLE NAME TABLE <$DH> NOT FOUND"
        exit 1
    elif [[ ! -f $DH ]] ; then
        echo "[ ERROR ] SAMPLE NAME TABLE <$DH> IS NOT AN ORDINARY FILE"
        exit 1
    fi
fi

## MAKE FIFO QUEUE
mkfifo q.pip && exec 99<> q.pip && rm -f q.pip
for ((i=0; i<$(($TR/2)); i++))
do
    echo >&99
done

## 00 DATA QUALITY CONTROL
## this should be done manually

## 01 MAKE ALIGNMENT
if [[ $JU -le 1 ]] && [[ $JE -ge 1 ]] ; then
    echo "[ INFO ] MAKE ALIGNMENT"
    if [[ ! -e "01-make-alignment" ]] ; then
        mkdir 01-make-alignment
    fi
    cd 01-make-alignment
    cat $DH | while read i
    do
        s=$i
        if $US ; then
            s=`grep -w "$i" $SF | cut -f1`
        fi
        thisVC-makeAlignment $FT $DA/$i$SUF"1"$SUL $DA/$i$SUF"2"$SUL $s $i $TR
    done
    cd ..
fi
## 02 PREPARE BAM FILES
if [[ $JU -le 2 ]] && [[ $JE -ge 2 ]]; then
    echo "[ INFO ] PREPARE BAM FILES"
    if [[ ! -e "02-prepare-bam" ]] ; then
        mkdir 02-prepare-bam
    fi
    cd 02-prepare-bam
    for i in `cat $DH`
    do
        read -u 99
        {
            echo "[ INFO ] Queue bamPrepare for $i"
            thisVC-bamPrepare ../01-make-alignment/$i.sort.bam $i
            echo "[ INFO ] End bamPrepare for $i"
            echo 1>&99
        }&
    done
    wait
    cd ..
fi

## 03 CALL HAPLOTYPE
if [[ $JU -le 3 ]] && [[ $JE -ge 3 ]] ; then
    echo "[ INFO ] CALL HAPLOTYPE"
    if [[ ! -e "03-call-haplotype" ]] ; then
        mkdir 03-call-haplotype
    fi
    cd 03-call-haplotype
    for i in `cat "$DH"`
    do
        read -u 99
        {
            echo "[ INFO ] Queue callHaplotype for $i"
            thisVC-callHaplotype ../02-prepare-bam/$i.ready.bam $i G
            echo "[ INFO ] End callHaplotype for $i"
            echo 1>&99
        } &
    done
    wait
    cd ..
fi

## 04 COMBINE GENOTYPE
if [[ $JU -le 4 ]] && [[ $JE -ge 4 ]] ; then
    echo "[ INFO ] COMBINE GENOTYPE"
    if [[ ! -e "04-combine-genotype" ]] ; then
        mkdir 04-combine-genotype
    fi
    cd 04-combine-genotype
    thisVC-combineGenotype ../03-call-haplotype $DH $FO
    cd ..
fi

echo "[ INFO ] PROCESSING FINISHED AT `date +%H:%M:%S`"

## 05 ANNOTATE VARIANTS
## this should be done locally, because vep cannot be installed offline
